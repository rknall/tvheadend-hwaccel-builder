# Dockerfile.debian - Build TVHeadend Debian packages with all addon features
# Includes: TVHeadend, Comskip, Comchap, Comcut, Picons, WebGrab++

FROM debian:bookworm AS builder

# Package versions (matching addon repository)
ARG TVHEADEND_COMMIT="7de8bf4826b1847118f3a42556cf0afeee2a5912"
ARG COMSKIP_COMMIT="a140b6ac8bc8f596729e9052819affc779c3b377"
ARG COMCHAP_COMMIT="dd7db30c258e965f282ac78825971dd0703a031e"
ARG PICONS_RELEASE="2025-10-17--08-28-59"

ENV DEBIAN_FRONTEND=noninteractive \
    BUILD_DIR=/build \
    OUTPUT_DIR=/output

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential pkg-config git cmake autoconf automake libtool \
    debhelper devscripts dh-make fakeroot lintian \
    wget curl ca-certificates jq xz-utils bzip2 patch file \
    libssl-dev libavahi-client-dev libavahi-common-dev liburiparser-dev \
    zlib1g-dev libavcodec-dev libavformat-dev libavfilter-dev libavutil-dev \
    libswscale-dev libswresample-dev libva-dev libva-drm2 libva-x11-2 \
    libx264-dev libx265-dev libvpx-dev libopus-dev libvorbis-dev libtheora-dev \
    libdvbcsa-dev libhdhomerun-dev python3 python3-requests python3-pip \
    gettext libargtable2-dev libsdl2-dev ccache pngquant \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p ${BUILD_DIR} ${OUTPUT_DIR}
WORKDIR ${BUILD_DIR}

# Copy debian package configuration files
COPY debian/ ${BUILD_DIR}/debian/

# Build TVHeadend
RUN echo "**** Building TVHeadend ****" && \
    git clone https://github.com/tvheadend/tvheadend.git tvheadend && \
    cd tvheadend && git checkout "${TVHEADEND_COMMIT}" && \
    sed -i 's/document\.cookie="ys-"+a/document\.cookie="ys-"+encodeURIComponent(a)/g' vendor/ext-3.4/ext-all.js && \
    sed -i 's/a\.substr(3)/decodeURIComponent(a\.substr(3))/g' vendor/ext-3.4/ext-all.js && \
    sed -i 's/document\.cookie = "ys-"+ name/ document\.cookie = "ys-"+ encodeURIComponent(name)/g' vendor/ext-3.4/ext-all-debug.js && \
    sed -i 's/document\.cookie = "ys-" + name/ document\.cookie = "ys-"+ encodeURIComponent(name)/g' vendor/ext-3.4/ext-all-debug.js && \
    sed -i 's/name\.substr(3)/decodeURIComponent(name\.substr(3))/g' vendor/ext-3.4/ext-all-debug.js && \
    git config --global --add safe.directory '/build/tvheadend/data/dvb-scan' && \
    ./configure --prefix=/usr --sysconfdir=/etc/tvheadend --localstatedir=/var \
    --mandir=/usr/share/man \
    --disable-doc --disable-execinfo --disable-ffmpeg_static --disable-hdhomerun_static \
    --disable-libfdkaac_static --disable-libopus_static --disable-libtheora_static \
    --disable-libvorbis_static --disable-libvpx_static --disable-libx264_static \
    --disable-libx265_static --disable-libfdkaac \
    --enable-bundle --enable-libav --enable-libx264 --enable-libx265 --enable-libvpx \
    --enable-libopus --enable-libvorbis --enable-libtheora --enable-vaapi --enable-dvbcsa \
    --enable-hdhomerun_client --enable-pngquant --enable-trace --enable-nvenc --enable-qsv \
    --python=python3 && \
    make -j$(nproc) && make DESTDIR=${BUILD_DIR}/tvh-install install

# Build Comskip
RUN echo "**** Building Comskip ****" && \
    git clone https://github.com/erikkaashoek/Comskip comskip && \
    cd comskip && git checkout "${COMSKIP_COMMIT}" && \
    ./autogen.sh && ./configure --bindir=/usr/bin --sysconfdir=/etc/comskip && \
    make -j$(nproc) && make DESTDIR=${BUILD_DIR}/cs-install install

# Get Comchap/Comcut
RUN echo "**** Getting Comchap/Comcut ****" && \
    git clone https://github.com/BrettSheleski/comchap comchap && \
    cd comchap && git checkout "${COMCHAP_COMMIT}"

# Download Picons
RUN echo "**** Downloading Picons ****" && \
    mkdir -p picons/tmp picons/snp picons/srp && \
    wget -q https://github.com/picons/picons/releases/download/2025-10-11--01-02-12/snp-full.220x132-190x102.light.on.transparent_2025-10-11--01-02-12.symlink.tar.xz \
         -O picons/tmp/snp.tar.xz && \
    curl -sL -H "Accept: application/vnd.github+json" \
         https://api.github.com/repos/picons/picons/releases/tags/${PICONS_RELEASE} > picons/tmp/release.json && \
    jq -r '.assets[]|select(.name|test("^utf8snp-full\\.220x132-190x102\\.light\\.on\\.transparent.*symlink\\.tar\\.xz$"))|.browser_download_url' \
       picons/tmp/release.json | xargs wget -q -O picons/tmp/utf8snp.tar.xz && \
    jq -r '.assets[]|select(.name|test("^srp-full\\.220x132-190x102\\.light\\.on\\.transparent.*symlink\\.tar\\.xz$"))|.browser_download_url' \
       picons/tmp/release.json | xargs wget -q -O picons/tmp/srp.tar.xz && \
    tar xfJ picons/tmp/utf8snp.tar.xz -C picons/snp --strip-components=1 && \
    tar xfJ picons/tmp/snp.tar.xz -C picons/snp --strip-components=1 && \
    tar xfJ picons/tmp/srp.tar.xz -C picons/srp --strip-components=1 && \
    rm -rf picons/tmp

# Download and setup WebGrab++
RUN echo "**** Downloading WebGrab++ ****" && \
    mkdir -p webgrab/tmp && \
    wget -q -O webgrab/tmp/wg.tar.gz \
         https://www.webgrabplus.com/sites/default/files/download/SW/V5.3.0/WebGrabPlus_V5.3_install.tar.gz && \
    tar -zxf webgrab/tmp/wg.tar.gz -C webgrab && \
    rm -rf webgrab/tmp && \
    # Try to run install script (might fail on Debian, that's OK)
    (cd webgrab/.wg++ && ./install.sh || true) && cd ${BUILD_DIR} && \
    # Create basic config if install.sh didn't create it
    if [ ! -f webgrab/.wg++/WebGrab++.config.xml ]; then \
        echo '<?xml version="1.0"?>' > webgrab/.wg++/WebGrab++.config.xml && \
        echo '<settings>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <filename>guide.xml</filename>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <mode></mode>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <postprocess grab="y" run="n">mdb</postprocess>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <user-agent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36</user-agent>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <logging>on</logging>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <retry time-out="5">4</retry>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <timespan>1</timespan>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <update>i</update>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '</settings>' >> webgrab/.wg++/WebGrab++.config.xml; \
    fi && \
    # Download tv_grab_wg++ wrapper
    wget -q -O webgrab/tv_grab_wg++ https://www.webgrabplus.com/sites/default/files/tv_grab_wg.txt && \
    chmod +x webgrab/tv_grab_wg++ && \
    # Verify installation
    echo "WebGrab++ files:" && ls -la webgrab/.wg++/ | head -20

# Create package structure
RUN mkdir -p pkg/DEBIAN pkg/usr/bin pkg/usr/share/tvheadend pkg/usr/share/doc/tvheadend-full \
    pkg/usr/share/man/man1 pkg/etc/tvheadend pkg/etc/comskip pkg/etc/default \
    pkg/var/lib/tvheadend pkg/opt/webgrab pkg/opt/picons pkg/lib/systemd/system

# Assemble package
RUN echo "**** Assembling package ****" && \
    cp -a tvh-install/usr/* pkg/usr/ && \
    cp -a cs-install/usr/bin/* pkg/usr/bin/ && \
    cp comchap/comchap comchap/comcut pkg/usr/bin/ && \
    chmod +x pkg/usr/bin/comchap pkg/usr/bin/comcut && \
    cp -a picons/snp picons/srp pkg/opt/picons/ && \
    cp -a webgrab/.wg++ pkg/opt/webgrab/ && \
    cp webgrab/tv_grab_wg++ pkg/usr/bin/ && \
    # Update WebGrab++ paths if config exists
    if [ -f pkg/opt/webgrab/.wg++/WebGrab++.config.xml ]; then \
        sed -i "s|<filename>guide.xml</filename>|<filename>/var/lib/tvheadend/webgrab/guide.xml</filename>|g" \
            pkg/opt/webgrab/.wg++/WebGrab++.config.xml; \
    fi && \
    sed -i 's|~/.wg++/guide.xml|/var/lib/tvheadend/webgrab/guide.xml|g' pkg/usr/bin/tv_grab_wg++

# Copy /etc/default/tvheadend
RUN cp ${BUILD_DIR}/debian/default/tvheadend pkg/etc/default/tvheadend

# Create control file from template
RUN VERSION=$(cd tvheadend && git describe --always --dirty 2>/dev/null || echo "unknown") && \
    ARCH=$(dpkg --print-architecture) && \
    sed -e "s/__VERSION__/${VERSION}/g" -e "s/__ARCH__/${ARCH}/g" \
        ${BUILD_DIR}/debian/control.template > pkg/DEBIAN/control

# Copy debian package scripts
RUN cp ${BUILD_DIR}/debian/config pkg/DEBIAN/config && \
    cp ${BUILD_DIR}/debian/templates pkg/DEBIAN/templates && \
    cp ${BUILD_DIR}/debian/postinst pkg/DEBIAN/postinst && \
    cp ${BUILD_DIR}/debian/prerm pkg/DEBIAN/prerm && \
    cp ${BUILD_DIR}/debian/postrm pkg/DEBIAN/postrm

# Copy systemd service
RUN cp ${BUILD_DIR}/debian/systemd/tvheadend.service pkg/lib/systemd/system/tvheadend.service

# Set permissions and build
RUN chmod 755 pkg/DEBIAN/config pkg/DEBIAN/postinst pkg/DEBIAN/prerm pkg/DEBIAN/postrm && \
    chmod 644 pkg/DEBIAN/templates && \
    dpkg-deb --build pkg

# Store package in build directory (not output, as it will be mounted)
RUN VERSION=$(cd tvheadend && git describe --always --dirty 2>/dev/null || echo "unknown") && \
    ARCH=$(dpkg --print-architecture) && \
    mv pkg.deb ${BUILD_DIR}/tvheadend-full_${VERSION}_${ARCH}.deb && \
    echo "${VERSION}" > ${BUILD_DIR}/VERSION.txt && \
    echo "${ARCH}" > ${BUILD_DIR}/ARCH.txt

# Create a script to copy files and generate BUILD_INFO at runtime
RUN cat > ${BUILD_DIR}/copy-output.sh << COPYSCRIPT
#!/bin/bash
set -e
VERSION=\$(cat /build/VERSION.txt)
ARCH=\$(cat /build/ARCH.txt)
DEB_FILE="/build/tvheadend-full_\${VERSION}_\${ARCH}.deb"

# Copy package to output
cp "\${DEB_FILE}" /output/

# Create BUILD_INFO
cat > /output/BUILD_INFO.txt << EOF
TVHeadend Full Package - Debian
================================
Build Date: \$(date)
Version: \${VERSION}
Architecture: \${ARCH}
Debian Base: bookworm

Components:
  - TVHeadend (${TVHEADEND_COMMIT})
  - Comskip (${COMSKIP_COMMIT})
  - Comchap/Comcut (${COMCHAP_COMMIT})
  - Picons (${PICONS_RELEASE})
  - WebGrab++ v5.3.0

Hardware Acceleration:
  - VAAPI (Intel/AMD)
  - NVENC (NVIDIA)
  - QSV (Intel Quick Sync)
  - VDPAU (NVIDIA)

Package: tvheadend-full_\${VERSION}_\${ARCH}.deb

Installation:
  sudo apt-get install -y xmltv perl
  sudo dpkg -i tvheadend-full_\${VERSION}_\${ARCH}.deb
  sudo apt-get install -f

Recommended (for hardware acceleration):
  sudo apt-get install -y mesa-va-drivers mesa-vdpau-drivers intel-media-va-driver

Optional (for WebGrab++):
  sudo apt-get install dotnet-runtime-8.0

Optional (for streaming):
  sudo apt-get install streamlink

Default Login:
  Username: admin
  Password: admin
  (CHANGE IMMEDIATELY after first login!)

Note: User 'hts' is automatically added to audio/video/render groups for hardware access.
EOF

echo "Build complete!"
ls -lh /output/
echo ""
cat /output/BUILD_INFO.txt
COPYSCRIPT

RUN chmod +x ${BUILD_DIR}/copy-output.sh

WORKDIR ${BUILD_DIR}
CMD ["/build/copy-output.sh"]
