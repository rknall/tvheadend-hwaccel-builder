# Dockerfile.debian - Build TVHeadend Debian packages with all addon features
# Includes: TVHeadend, Comskip, Comchap, Comcut, Picons, WebGrab++

FROM debian:bookworm AS builder

# Package versions (matching addon repository)
ARG TVHEADEND_COMMIT="7de8bf4826b1847118f3a42556cf0afeee2a5912"
ARG COMSKIP_COMMIT="a140b6ac8bc8f596729e9052819affc779c3b377"
ARG COMCHAP_COMMIT="dd7db30c258e965f282ac78825971dd0703a031e"
ARG PICONS_RELEASE="2025-10-17--08-28-59"

ENV DEBIAN_FRONTEND=noninteractive \
    BUILD_DIR=/build \
    OUTPUT_DIR=/output

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential pkg-config git cmake autoconf automake libtool \
    debhelper devscripts dh-make fakeroot lintian \
    wget curl ca-certificates jq xz-utils bzip2 patch file \
    libssl-dev libavahi-client-dev libavahi-common-dev liburiparser-dev \
    zlib1g-dev libavcodec-dev libavformat-dev libavfilter-dev libavutil-dev \
    libswscale-dev libswresample-dev libva-dev libva-drm2 libva-x11-2 \
    libx264-dev libx265-dev libvpx-dev libopus-dev libvorbis-dev libtheora-dev \
    libdvbcsa-dev libhdhomerun-dev python3 python3-requests python3-pip \
    gettext libargtable2-dev libsdl2-dev ccache pngquant \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p ${BUILD_DIR} ${OUTPUT_DIR}
WORKDIR ${BUILD_DIR}

# Build TVHeadend
RUN echo "**** Building TVHeadend ****" && \
    git clone https://github.com/tvheadend/tvheadend.git tvheadend && \
    cd tvheadend && git checkout "${TVHEADEND_COMMIT}" && \
    sed -i 's/document\.cookie="ys-"+a/document\.cookie="ys-"+encodeURIComponent(a)/g' vendor/ext-3.4/ext-all.js && \
    sed -i 's/a\.substr(3)/decodeURIComponent(a\.substr(3))/g' vendor/ext-3.4/ext-all.js && \
    sed -i 's/document\.cookie = "ys-"+ name/ document\.cookie = "ys-"+ encodeURIComponent(name)/g' vendor/ext-3.4/ext-all-debug.js && \
    sed -i 's/document\.cookie = "ys-" + name/ document\.cookie = "ys-"+ encodeURIComponent(name)/g' vendor/ext-3.4/ext-all-debug.js && \
    sed -i 's/name\.substr(3)/decodeURIComponent(name\.substr(3))/g' vendor/ext-3.4/ext-all-debug.js && \
    git config --global --add safe.directory '/build/tvheadend/data/dvb-scan' && \
    ./configure --prefix=/usr --sysconfdir=/etc/tvheadend --localstatedir=/var \
    --mandir=/usr/share/man \
    --disable-doc --disable-execinfo --disable-ffmpeg_static --disable-hdhomerun_static \
    --disable-libfdkaac_static --disable-libopus_static --disable-libtheora_static \
    --disable-libvorbis_static --disable-libvpx_static --disable-libx264_static \
    --disable-libx265_static --disable-libfdkaac \
    --enable-bundle --enable-libav --enable-libx264 --enable-libx265 --enable-libvpx \
    --enable-libopus --enable-libvorbis --enable-libtheora --enable-vaapi --enable-dvbcsa \
    --enable-hdhomerun_client --enable-pngquant --enable-trace --enable-nvenc --enable-qsv \
    --python=python3 && \
    make -j$(nproc) && make DESTDIR=${BUILD_DIR}/tvh-install install

# Build Comskip
RUN echo "**** Building Comskip ****" && \
    git clone https://github.com/erikkaashoek/Comskip comskip && \
    cd comskip && git checkout "${COMSKIP_COMMIT}" && \
    ./autogen.sh && ./configure --bindir=/usr/bin --sysconfdir=/etc/comskip && \
    make -j$(nproc) && make DESTDIR=${BUILD_DIR}/cs-install install

# Get Comchap/Comcut
RUN echo "**** Getting Comchap/Comcut ****" && \
    git clone https://github.com/BrettSheleski/comchap comchap && \
    cd comchap && git checkout "${COMCHAP_COMMIT}"

# Download Picons
RUN echo "**** Downloading Picons ****" && \
    mkdir -p picons/tmp picons/snp picons/srp && \
    wget -q https://github.com/picons/picons/releases/download/2025-10-11--01-02-12/snp-full.220x132-190x102.light.on.transparent_2025-10-11--01-02-12.symlink.tar.xz \
         -O picons/tmp/snp.tar.xz && \
    curl -sL -H "Accept: application/vnd.github+json" \
         https://api.github.com/repos/picons/picons/releases/tags/${PICONS_RELEASE} > picons/tmp/release.json && \
    jq -r '.assets[]|select(.name|test("^utf8snp-full\\.220x132-190x102\\.light\\.on\\.transparent.*symlink\\.tar\\.xz$"))|.browser_download_url' \
       picons/tmp/release.json | xargs wget -q -O picons/tmp/utf8snp.tar.xz && \
    jq -r '.assets[]|select(.name|test("^srp-full\\.220x132-190x102\\.light\\.on\\.transparent.*symlink\\.tar\\.xz$"))|.browser_download_url' \
       picons/tmp/release.json | xargs wget -q -O picons/tmp/srp.tar.xz && \
    tar xfJ picons/tmp/utf8snp.tar.xz -C picons/snp --strip-components=1 && \
    tar xfJ picons/tmp/snp.tar.xz -C picons/snp --strip-components=1 && \
    tar xfJ picons/tmp/srp.tar.xz -C picons/srp --strip-components=1 && \
    rm -rf picons/tmp

# Download and setup WebGrab++
RUN echo "**** Downloading WebGrab++ ****" && \
    mkdir -p webgrab/tmp && \
    wget -q -O webgrab/tmp/wg.tar.gz \
         https://www.webgrabplus.com/sites/default/files/download/SW/V5.3.0/WebGrabPlus_V5.3_install.tar.gz && \
    tar -zxf webgrab/tmp/wg.tar.gz -C webgrab && \
    rm -rf webgrab/tmp && \
    # Try to run install script (might fail on Debian, that's OK)
    (cd webgrab/.wg++ && ./install.sh || true) && cd ${BUILD_DIR} && \
    # Create basic config if install.sh didn't create it
    if [ ! -f webgrab/.wg++/WebGrab++.config.xml ]; then \
        echo '<?xml version="1.0"?>' > webgrab/.wg++/WebGrab++.config.xml && \
        echo '<settings>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <filename>guide.xml</filename>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <mode></mode>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <postprocess grab="y" run="n">mdb</postprocess>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <user-agent>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36</user-agent>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <logging>on</logging>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <retry time-out="5">4</retry>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <timespan>1</timespan>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '  <update>i</update>' >> webgrab/.wg++/WebGrab++.config.xml && \
        echo '</settings>' >> webgrab/.wg++/WebGrab++.config.xml; \
    fi && \
    # Download tv_grab_wg++ wrapper
    wget -q -O webgrab/tv_grab_wg++ https://www.webgrabplus.com/sites/default/files/tv_grab_wg.txt && \
    chmod +x webgrab/tv_grab_wg++ && \
    # Verify installation
    echo "WebGrab++ files:" && ls -la webgrab/.wg++/ | head -20

# Create package structure
RUN mkdir -p pkg/DEBIAN pkg/usr/bin pkg/usr/share/tvheadend pkg/usr/share/doc/tvheadend-full \
    pkg/usr/share/man/man1 pkg/etc/tvheadend pkg/etc/comskip pkg/etc/default \
    pkg/var/lib/tvheadend pkg/opt/webgrab pkg/opt/picons pkg/lib/systemd/system

# Assemble package
RUN echo "**** Assembling package ****" && \
    cp -a tvh-install/usr/* pkg/usr/ && \
    cp -a cs-install/usr/bin/* pkg/usr/bin/ && \
    cp comchap/comchap comchap/comcut pkg/usr/bin/ && \
    chmod +x pkg/usr/bin/comchap pkg/usr/bin/comcut && \
    cp -a picons/snp picons/srp pkg/opt/picons/ && \
    cp -a webgrab/.wg++ pkg/opt/webgrab/ && \
    cp webgrab/tv_grab_wg++ pkg/usr/bin/ && \
    # Update WebGrab++ paths if config exists
    if [ -f pkg/opt/webgrab/.wg++/WebGrab++.config.xml ]; then \
        sed -i "s|<filename>guide.xml</filename>|<filename>/var/lib/tvheadend/webgrab/guide.xml</filename>|g" \
            pkg/opt/webgrab/.wg++/WebGrab++.config.xml; \
    fi && \
    sed -i 's|~/.wg++/guide.xml|/var/lib/tvheadend/webgrab/guide.xml|g' pkg/usr/bin/tv_grab_wg++

# Create /etc/default/tvheadend
RUN cat > pkg/etc/default/tvheadend << 'DEFAULTCONF'
#
# Default configuration for Tvheadend.

# systemd
# See tvheadend --help for more - default "-u hts -g video"
OPTIONS="-u hts -g video"
DEFAULTCONF

# Create control file
RUN VERSION=$(cd tvheadend && git describe --always --dirty 2>/dev/null || echo "unknown") && \
    ARCH=$(dpkg --print-architecture) && \
    cat > pkg/DEBIAN/control << EOF
Package: tvheadend-full
Version: 4.3-${VERSION}
Section: video
Priority: optional
Architecture: ${ARCH}
Depends: libavahi-client3, libavahi-common3, liburiparser1, zlib1g, libavcodec59 | libavcodec-extra59, libavformat59, libavfilter8, libavutil57, libswscale6, libswresample4, libssl3, libva2, libva-drm2, libx264-164, libx265-199, libvpx7, libopus0, libvorbis0a, libtheora0, libdvbcsa1, libhdhomerun4, libargtable2-0, libsdl2-2.0-0, python3, python3-requests, xmltv, perl
Recommends: ffmpeg, streamlink, dotnet-runtime-8.0 | dotnet-runtime-6.0 | mono-runtime, mesa-va-drivers, mesa-vdpau-drivers, intel-media-va-driver
Suggests: pngquant, nvidia-driver
Maintainer: TVHeadend Full <support@tvheadend.org>
Description: TV streaming server with commercial detection and extras
 TVHeadend with Comskip, Comchap, Comcut, Picons, and WebGrab++.
 Full-featured TV streaming and recording solution with hardware
 acceleration support (VAAPI, NVENC, QSV).
 .
 Hardware acceleration enabled for:
  - Intel Quick Sync Video (QSV)
  - NVIDIA NVENC
  - AMD/Intel VAAPI
  - VDPAU (NVIDIA)
Homepage: https://tvheadend.org
EOF

# Create postinst
RUN cat > pkg/DEBIAN/postinst << 'POSTINST'
#!/bin/sh -e

HTS_USER="hts"
HTS_HOMEDIR="/var/lib/tvheadend"

case "$1" in
configure)
    # Create hts user and group if they don't exist
    if ! getent group "$HTS_USER" >/dev/null; then
        addgroup --quiet --system "$HTS_USER"
    fi

    if ! getent passwd "$HTS_USER" >/dev/null; then
        adduser --quiet --system --ingroup "$HTS_USER" --home "$HTS_HOMEDIR" \
            --no-create-home --disabled-password --disabled-login \
            --shell /usr/sbin/nologin "$HTS_USER"
    fi

    # Add hts user to audio, video, and render groups (for hardware access)
    # audio: audio devices
    # video: /dev/dri/card* access (legacy and primary GPU)
    # render: /dev/dri/renderD* access (modern DRI rendering)
    usermod -a -G audio,video "$HTS_USER" 2>/dev/null || true
    usermod -a -G render "$HTS_USER" 2>/dev/null || true

    # Create necessary directories
    install -d -g "$HTS_USER" -o "$HTS_USER" "$HTS_HOMEDIR/recordings"
    install -d -g "$HTS_USER" -o "$HTS_USER" "$HTS_HOMEDIR/webgrab"
    mkdir -p /var/log/tvheadend
    mkdir -p /etc/tvheadend/comskip

    # Set permissions
    chown -R "$HTS_USER":"$HTS_USER" "$HTS_HOMEDIR" /etc/tvheadend /var/log/tvheadend 2>/dev/null || true
    chmod 755 "$HTS_HOMEDIR" /etc/tvheadend /var/log/tvheadend 2>/dev/null || true
    chmod 775 "$HTS_HOMEDIR/recordings" 2>/dev/null || true

    # Create symlink for picons
    ln -sf /opt/picons "$HTS_HOMEDIR/picons" 2>/dev/null || true

    # Create access control entry for initial admin access
    # Default credentials: admin/admin (CHANGE THESE IMMEDIATELY!)
    mkdir -p "$HTS_HOMEDIR/accesscontrol"
    HTS_ACCESSCONF="$HTS_HOMEDIR/accesscontrol/1"
    if [ ! -f "$HTS_ACCESSCONF" ]; then
        cat > "$HTS_ACCESSCONF" << 'ACCESSENTRY'
{
  "enabled": true,
  "username": "admin",
  "password": "admin",
  "comment": "Default admin user - CHANGE PASSWORD IMMEDIATELY!",
  "prefix": "0.0.0.0/0,::/0",
  "streaming": true,
  "adv_streaming": true,
  "htsp_streaming": true,
  "profile": "",
  "dvr": true,
  "htsp_dvr": true,
  "all_dvr": true,
  "all_rw_dvr": true,
  "dvr_config": "",
  "channel_min": 0,
  "channel_max": 0,
  "channel_tag": "",
  "channel_tag_exclude": false,
  "admin": true,
  "webui": true
}
ACCESSENTRY
        chmod 600 "$HTS_ACCESSCONF"
        chown "$HTS_USER":"$HTS_USER" "$HTS_ACCESSCONF"
        chown "$HTS_USER":"$HTS_USER" "$HTS_HOMEDIR/accesscontrol"
    fi

    # Reload systemd if available
    if [ -d /run/systemd/system ]; then
        systemctl daemon-reload || true
        systemctl enable tvheadend.service || true
    fi

    echo ""
    echo "=========================================="
    echo "TVHeadend Full has been installed!"
    echo "=========================================="
    echo ""
    echo "IMPORTANT: Default login credentials"
    echo "  Username: admin"
    echo "  Password: admin"
    echo ""
    echo "  CHANGE THESE IMMEDIATELY after first login!"
    echo "  (Configuration → Users → Access Entries)"
    echo ""
    echo "Additional tools included:"
    echo "  - Comskip: /usr/bin/comskip"
    echo "  - Comchap: /usr/bin/comchap"
    echo "  - Comcut: /usr/bin/comcut"
    echo "  - Picons: /opt/picons"
    echo "  - WebGrab++: /opt/webgrab/.wg++"
    echo "  - tv_grab_wg++: /usr/bin/tv_grab_wg++"
    echo ""
    echo "Hardware acceleration enabled:"
    echo "  - VAAPI (Intel/AMD)"
    echo "  - NVENC (NVIDIA)"
    echo "  - QSV (Intel Quick Sync)"
    echo "  Note: User 'hts' added to audio, video, and render groups"
    echo ""
    echo "To start TVHeadend:"
    echo "  sudo systemctl start tvheadend"
    echo ""
    echo "Web interface: http://localhost:9981"
    echo ""
    ;;
esac

exit 0
POSTINST

# Create prerm
RUN cat > pkg/DEBIAN/prerm << 'PRERM'
#!/bin/bash
set -e
if [ -d /run/systemd/system ]; then
    systemctl stop tvheadend.service || true
    systemctl disable tvheadend.service || true
fi
exit 0
PRERM

# Create postrm
RUN cat > pkg/DEBIAN/postrm << 'POSTRM'
#!/bin/sh -e
if [ "$1" = "purge" ]; then
    if getent passwd hts >/dev/null; then deluser hts || true; fi
    if getent group hts >/dev/null; then delgroup hts || true; fi
    rm -rf /etc/tvheadend || true
    rm -rf /var/log/tvheadend || true
    # Uncomment to also remove recordings:
    # rm -rf /var/lib/tvheadend || true
fi
rm -f /var/lib/tvheadend/picons 2>/dev/null || true
if [ -d /run/systemd/system ]; then systemctl daemon-reload || true; fi
exit 0
POSTRM

# Create systemd service
RUN cat > pkg/lib/systemd/system/tvheadend.service << 'SERVICE'
[Unit]
Description=Tvheadend - a TV streaming server and DVR
After=auditd.service syslog.target network.target network-online.target local-fs.target

[Service]
EnvironmentFile=/etc/default/tvheadend
ExecStart=/usr/bin/tvheadend -f -p /run/tvheadend.pid $OPTIONS
PIDFile=/run/tvheadend.pid
Type=forking
Restart=on-failure
RestartSec=54s

[Install]
WantedBy=multi-user.target
SERVICE

# Set permissions and build
RUN chmod 755 pkg/DEBIAN/postinst pkg/DEBIAN/prerm pkg/DEBIAN/postrm && \
    dpkg-deb --build pkg

# Store package in build directory (not output, as it will be mounted)
RUN VERSION=$(cd tvheadend && git describe --always --dirty 2>/dev/null || echo "unknown") && \
    ARCH=$(dpkg --print-architecture) && \
    mv pkg.deb ${BUILD_DIR}/tvheadend-full_${VERSION}_${ARCH}.deb && \
    echo "${VERSION}" > ${BUILD_DIR}/VERSION.txt && \
    echo "${ARCH}" > ${BUILD_DIR}/ARCH.txt

# Create a script to copy files and generate BUILD_INFO at runtime
RUN cat > ${BUILD_DIR}/copy-output.sh << COPYSCRIPT
#!/bin/bash
set -e
VERSION=\$(cat /build/VERSION.txt)
ARCH=\$(cat /build/ARCH.txt)
DEB_FILE="/build/tvheadend-full_\${VERSION}_\${ARCH}.deb"

# Copy package to output
cp "\${DEB_FILE}" /output/

# Create BUILD_INFO
cat > /output/BUILD_INFO.txt << EOF
TVHeadend Full Package - Debian
================================
Build Date: \$(date)
Version: \${VERSION}
Architecture: \${ARCH}
Debian Base: bookworm

Components:
  - TVHeadend (${TVHEADEND_COMMIT})
  - Comskip (${COMSKIP_COMMIT})
  - Comchap/Comcut (${COMCHAP_COMMIT})
  - Picons (${PICONS_RELEASE})
  - WebGrab++ v5.3.0

Hardware Acceleration:
  - VAAPI (Intel/AMD)
  - NVENC (NVIDIA)
  - QSV (Intel Quick Sync)
  - VDPAU (NVIDIA)

Package: tvheadend-full_\${VERSION}_\${ARCH}.deb

Installation:
  sudo apt-get install -y xmltv perl
  sudo dpkg -i tvheadend-full_\${VERSION}_\${ARCH}.deb
  sudo apt-get install -f

Recommended (for hardware acceleration):
  sudo apt-get install -y mesa-va-drivers mesa-vdpau-drivers intel-media-va-driver

Optional (for WebGrab++):
  sudo apt-get install dotnet-runtime-8.0

Optional (for streaming):
  sudo apt-get install streamlink

Default Login:
  Username: admin
  Password: admin
  (CHANGE IMMEDIATELY after first login!)

Note: User 'hts' is automatically added to audio/video/render groups for hardware access.
EOF

echo "Build complete!"
ls -lh /output/
echo ""
cat /output/BUILD_INFO.txt
COPYSCRIPT

RUN chmod +x ${BUILD_DIR}/copy-output.sh

WORKDIR ${BUILD_DIR}
CMD ["/build/copy-output.sh"]
