# Dockerfile.debian - Build TVHeadend Debian packages with all addon features
# Includes: TVHeadend, Comskip, Comchap, Comcut, Picons, WebGrab++

FROM debian:bookworm AS builder

# Package versions (matching addon repository)
ARG TVHEADEND_COMMIT="7de8bf4826b1847118f3a42556cf0afeee2a5912"
ARG COMSKIP_COMMIT="a140b6ac8bc8f596729e9052819affc779c3b377"
ARG COMCHAP_COMMIT="dd7db30c258e965f282ac78825971dd0703a031e"
ARG PICONS_RELEASE="2025-10-17--08-28-59"

ENV DEBIAN_FRONTEND=noninteractive \
    BUILD_DIR=/build \
    OUTPUT_DIR=/output

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential pkg-config git cmake autoconf automake libtool \
    debhelper devscripts dh-make fakeroot lintian \
    wget curl ca-certificates jq xz-utils bzip2 patch file \
    libssl-dev libavahi-client-dev libavahi-common-dev liburiparser-dev \
    zlib1g-dev libavcodec-dev libavformat-dev libavfilter-dev libavutil-dev \
    libswscale-dev libswresample-dev libva-dev libva-drm2 libva-x11-2 \
    libx264-dev libx265-dev libvpx-dev libopus-dev libvorbis-dev libtheora-dev \
    libdvbcsa-dev libhdhomerun-dev python3 python3-requests python3-pip \
    gettext libargtable2-dev libsdl2-dev ccache pngquant \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p ${BUILD_DIR} ${OUTPUT_DIR}
WORKDIR ${BUILD_DIR}

# Copy debian package configuration files, templates, and scripts
COPY debian/ ${BUILD_DIR}/debian/
COPY templates/ ${BUILD_DIR}/templates/
COPY scripts/ ${BUILD_DIR}/scripts/

# Copy patches directory
COPY patches/ ${BUILD_DIR}/patches/

# Copy custom libraries if available (optional)
RUN mkdir -p ${BUILD_DIR}/custom-libs
COPY custom-libs/ ${BUILD_DIR}/custom-libs/

# Install custom libraries if provided
RUN if [ -n "$(ls -A ${BUILD_DIR}/custom-libs/*.deb 2>/dev/null)" ]; then \
        echo "**** Installing custom FFmpeg/codec libraries ****" && \
        ls -lh ${BUILD_DIR}/custom-libs/ && \
        # Remove conflicting system FFmpeg packages first
        echo "**** Removing system FFmpeg packages ****" && \
        apt-get remove -y --purge libavcodec-dev libavformat-dev libavfilter-dev libavutil-dev \
            libswscale-dev libswresample-dev libpostproc-dev libavdevice-dev || true && \
        apt-get autoremove -y && \
        # Use gdebi or apt to install with dependency resolution
        echo "**** Installing all custom library packages with dependencies ****" && \
        apt-get update && \
        apt-get install -y --no-install-recommends gdebi-core && \
        for deb in ${BUILD_DIR}/custom-libs/*.deb; do \
            echo "Installing: $(basename $deb)" && \
            gdebi -n "$deb" || true; \
        done && \
        # Clean up
        apt-get clean && rm -rf /var/lib/apt/lists/* && \
        # Verify installation
        echo "**** Verifying pkg-config files ****" && \
        pkg-config --modversion libavcodec libavformat libavfilter libavutil libswscale libswresample && \
        echo "**** Custom libraries installed successfully ****" && \
        touch ${BUILD_DIR}/.using-custom-libs; \
    else \
        echo "**** No custom libraries found, using system packages ****"; \
    fi

# Build TVHeadend
RUN echo "**** Building TVHeadend ****" && \
    git clone https://github.com/tvheadend/tvheadend.git tvheadend && \
    cd tvheadend && git checkout "${TVHEADEND_COMMIT}" && \
    echo "**** Applying patches ****" && \
    if [ -d "${BUILD_DIR}/patches" ] && [ -n "$(ls -A ${BUILD_DIR}/patches/*.patch 2>/dev/null)" ]; then \
        for patch in ${BUILD_DIR}/patches/*.patch; do \
            echo "Applying patch: $(basename $patch)" && \
            git apply --verbose "$patch" || exit 1; \
        done; \
    else \
        echo "No patches found to apply"; \
    fi && \
    sed -i 's/document\.cookie="ys-"+a/document\.cookie="ys-"+encodeURIComponent(a)/g' vendor/ext-3.4/ext-all.js && \
    sed -i 's/a\.substr(3)/decodeURIComponent(a\.substr(3))/g' vendor/ext-3.4/ext-all.js && \
    sed -i 's/document\.cookie = "ys-"+ name/ document\.cookie = "ys-"+ encodeURIComponent(name)/g' vendor/ext-3.4/ext-all-debug.js && \
    sed -i 's/document\.cookie = "ys-" + name/ document\.cookie = "ys-"+ encodeURIComponent(name)/g' vendor/ext-3.4/ext-all-debug.js && \
    sed -i 's/name\.substr(3)/decodeURIComponent(name\.substr(3))/g' vendor/ext-3.4/ext-all-debug.js && \
    git config --global --add safe.directory '/build/tvheadend/data/dvb-scan' && \
    # Detect architecture for conditional hardware acceleration flags
    ARCH=$(dpkg --print-architecture) && \
    # Set QSV flag based on architecture (Intel Quick Sync is Intel-only via libvpl)
    if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "i386" ]; then \
        QSV_FLAG="--enable-qsv" && \
        echo "Building for Intel architecture ($ARCH): QSV enabled"; \
    else \
        QSV_FLAG="--disable-qsv" && \
        echo "Building for non-Intel architecture ($ARCH): QSV disabled, VAAPI/NVENC available"; \
    fi && \
    ./configure --prefix=/usr --sysconfdir=/etc/tvheadend --localstatedir=/var \
    --mandir=/usr/share/man \
    --disable-doc --disable-execinfo --disable-ffmpeg_static --disable-hdhomerun_static \
    --disable-libfdkaac_static --disable-libopus_static --disable-libtheora_static \
    --disable-libvorbis_static --disable-libvpx_static --disable-libx264_static \
    --disable-libx265_static --disable-libfdkaac \
    --enable-bundle --enable-libav --enable-libx264 --enable-libx265 --enable-libvpx \
    --enable-libopus --enable-libvorbis --enable-libtheora --enable-vaapi --enable-dvbcsa \
    --enable-hdhomerun_client --enable-pngquant --enable-trace --enable-nvenc $QSV_FLAG \
    --python=python3 && \
    make -j$(nproc) && make DESTDIR=${BUILD_DIR}/tvh-install install

# Build Comskip
RUN echo "**** Building Comskip ****" && \
    git clone https://github.com/erikkaashoek/Comskip comskip && \
    cd comskip && git checkout "${COMSKIP_COMMIT}" && \
    ./autogen.sh && ./configure --bindir=/usr/bin --sysconfdir=/etc/comskip && \
    make -j$(nproc) && make DESTDIR=${BUILD_DIR}/cs-install install

# Get Comchap/Comcut
RUN echo "**** Getting Comchap/Comcut ****" && \
    git clone https://github.com/BrettSheleski/comchap comchap && \
    cd comchap && git checkout "${COMCHAP_COMMIT}"

# Download Picons
RUN echo "**** Downloading Picons ****" && \
    mkdir -p picons/tmp picons/snp picons/srp && \
    wget -q https://github.com/picons/picons/releases/download/2025-10-11--01-02-12/snp-full.220x132-190x102.light.on.transparent_2025-10-11--01-02-12.symlink.tar.xz \
         -O picons/tmp/snp.tar.xz && \
    curl -sL -H "Accept: application/vnd.github+json" \
         https://api.github.com/repos/picons/picons/releases/tags/${PICONS_RELEASE} > picons/tmp/release.json && \
    jq -r '.assets[]|select(.name|test("^utf8snp-full\\.220x132-190x102\\.light\\.on\\.transparent.*symlink\\.tar\\.xz$"))|.browser_download_url' \
       picons/tmp/release.json | xargs wget -q -O picons/tmp/utf8snp.tar.xz && \
    jq -r '.assets[]|select(.name|test("^srp-full\\.220x132-190x102\\.light\\.on\\.transparent.*symlink\\.tar\\.xz$"))|.browser_download_url' \
       picons/tmp/release.json | xargs wget -q -O picons/tmp/srp.tar.xz && \
    tar xfJ picons/tmp/utf8snp.tar.xz -C picons/snp --strip-components=1 && \
    tar xfJ picons/tmp/snp.tar.xz -C picons/snp --strip-components=1 && \
    tar xfJ picons/tmp/srp.tar.xz -C picons/srp --strip-components=1 && \
    rm -rf picons/tmp

# Download and setup WebGrab++
RUN echo "**** Downloading WebGrab++ ****" && \
    mkdir -p webgrab/tmp && \
    wget -q -O webgrab/tmp/wg.tar.gz \
         https://www.webgrabplus.com/sites/default/files/download/SW/V5.3.0/WebGrabPlus_V5.3_install.tar.gz && \
    tar -zxf webgrab/tmp/wg.tar.gz -C webgrab && \
    rm -rf webgrab/tmp && \
    # Try to run install script (might fail on Debian, that's OK)
    (cd webgrab/.wg++ && ./install.sh || true) && cd ${BUILD_DIR} && \
    # Create basic config if install.sh didn't create it
    if [ ! -f webgrab/.wg++/WebGrab++.config.xml ]; then \
        cp ${BUILD_DIR}/templates/webgrab-config.xml.template webgrab/.wg++/WebGrab++.config.xml; \
    fi && \
    # Download tv_grab_wg++ wrapper
    wget -q -O webgrab/tv_grab_wg++ https://www.webgrabplus.com/sites/default/files/tv_grab_wg.txt && \
    chmod +x webgrab/tv_grab_wg++ && \
    # Verify installation
    echo "WebGrab++ files:" && ls -la webgrab/.wg++/ | head -20

# Create package structures for all 5 packages
RUN mkdir -p pkg-tvheadend/DEBIAN pkg-tvheadend/usr/bin pkg-tvheadend/usr/share/tvheadend \
    pkg-tvheadend/usr/share/man/man1 pkg-tvheadend/etc/tvheadend pkg-tvheadend/etc/default \
    pkg-tvheadend/var/lib/tvheadend pkg-tvheadend/lib/systemd/system && \
    mkdir -p pkg-comskip/DEBIAN pkg-comskip/usr/bin pkg-comskip/etc/comskip && \
    mkdir -p pkg-picons/DEBIAN pkg-picons/opt/picons && \
    mkdir -p pkg-webgrab/DEBIAN pkg-webgrab/usr/bin pkg-webgrab/opt/webgrab && \
    mkdir -p pkg-full/DEBIAN

# Assemble tvheadend core package
RUN echo "**** Assembling tvheadend core package ****" && \
    cp -a tvh-install/usr/* pkg-tvheadend/usr/ && \
    cp ${BUILD_DIR}/debian/default/tvheadend pkg-tvheadend/etc/default/tvheadend && \
    cp ${BUILD_DIR}/debian/systemd/tvheadend.service pkg-tvheadend/lib/systemd/system/tvheadend.service && \
    # Bundle custom libraries if used
    if [ -f ${BUILD_DIR}/.using-custom-libs ]; then \
        echo "**** Bundling custom FFmpeg/codec libraries ****" && \
        ARCH=$(dpkg --print-architecture) && \
        mkdir -p pkg-tvheadend/usr/lib/${ARCH}-linux-gnu pkg-tvheadend/usr/bin && \
        # Copy FFmpeg binaries
        cp -a /usr/bin/ffmpeg /usr/bin/ffprobe pkg-tvheadend/usr/bin/ 2>/dev/null || true && \
        # Copy all libav* libraries
        cp -a /usr/lib/${ARCH}-linux-gnu/libavcodec*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libavformat*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libavfilter*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libavutil*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libswscale*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libswresample*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libpostproc*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        # Copy codec libraries
        cp -a /usr/lib/${ARCH}-linux-gnu/libx264*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libx265*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libvpx*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libopus*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libvorbis*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libtheora*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        cp -a /usr/lib/${ARCH}-linux-gnu/libogg*.so* pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ 2>/dev/null || true && \
        echo "**** Bundled libraries: ****" && \
        ls -lh pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/ | head -20 && \
        du -sh pkg-tvheadend/usr/lib/${ARCH}-linux-gnu/; \
    fi

# Assemble comskip package
RUN echo "**** Assembling comskip package ****" && \
    cp -a cs-install/usr/bin/* pkg-comskip/usr/bin/ && \
    cp comchap/comchap comchap/comcut pkg-comskip/usr/bin/ && \
    chmod +x pkg-comskip/usr/bin/comchap pkg-comskip/usr/bin/comcut

# Assemble picons package
RUN echo "**** Assembling picons package ****" && \
    cp -a picons/snp picons/srp pkg-picons/opt/picons/

# Assemble webgrab package
RUN echo "**** Assembling webgrab package ****" && \
    cp -a webgrab/.wg++ pkg-webgrab/opt/webgrab/ && \
    cp webgrab/tv_grab_wg++ pkg-webgrab/usr/bin/ && \
    if [ -f pkg-webgrab/opt/webgrab/.wg++/WebGrab++.config.xml ]; then \
        sed -i "s|<filename>guide.xml</filename>|<filename>/var/lib/tvheadend/webgrab/guide.xml</filename>|g" \
            pkg-webgrab/opt/webgrab/.wg++/WebGrab++.config.xml; \
    fi && \
    sed -i 's|~/.wg++/guide.xml|/var/lib/tvheadend/webgrab/guide.xml|g' pkg-webgrab/usr/bin/tv_grab_wg++

# Create control files for all packages
RUN VERSION=$(cd tvheadend && git describe --always --dirty 2>/dev/null || echo "unknown") && \
    ARCH=$(dpkg --print-architecture) && \
    sed -e "s/__VERSION__/${VERSION}/g" -e "s/__ARCH__/${ARCH}/g" \
        ${BUILD_DIR}/debian/control-tvheadend.template > pkg-tvheadend/DEBIAN/control && \
    sed -e "s/__VERSION__/${VERSION}/g" -e "s/__ARCH__/${ARCH}/g" \
        ${BUILD_DIR}/debian/control-comskip.template > pkg-comskip/DEBIAN/control && \
    sed -e "s/__VERSION__/${VERSION}/g" -e "s/__PICONS_RELEASE__/${PICONS_RELEASE}/g" \
        ${BUILD_DIR}/debian/control-picons.template > pkg-picons/DEBIAN/control && \
    sed -e "s/__VERSION__/${VERSION}/g" \
        ${BUILD_DIR}/debian/control-webgrab.template > pkg-webgrab/DEBIAN/control && \
    sed -e "s/__VERSION__/${VERSION}/g" \
        ${BUILD_DIR}/debian/control-full.template > pkg-full/DEBIAN/control

# Copy debian package scripts for tvheadend core
RUN cp ${BUILD_DIR}/debian/config pkg-tvheadend/DEBIAN/config && \
    cp ${BUILD_DIR}/debian/templates pkg-tvheadend/DEBIAN/templates && \
    cp ${BUILD_DIR}/debian/postinst pkg-tvheadend/DEBIAN/postinst && \
    cp ${BUILD_DIR}/debian/prerm pkg-tvheadend/DEBIAN/prerm && \
    cp ${BUILD_DIR}/debian/postrm pkg-tvheadend/DEBIAN/postrm && \
    chmod 755 pkg-tvheadend/DEBIAN/config pkg-tvheadend/DEBIAN/postinst \
        pkg-tvheadend/DEBIAN/prerm pkg-tvheadend/DEBIAN/postrm && \
    chmod 644 pkg-tvheadend/DEBIAN/templates

# Copy postinst/postrm scripts for addon packages
RUN cp ${BUILD_DIR}/debian/postinst-comskip pkg-comskip/DEBIAN/postinst && \
    cp ${BUILD_DIR}/debian/postrm-comskip pkg-comskip/DEBIAN/postrm && \
    chmod 755 pkg-comskip/DEBIAN/postinst pkg-comskip/DEBIAN/postrm && \
    cp ${BUILD_DIR}/debian/postinst-picons pkg-picons/DEBIAN/postinst && \
    cp ${BUILD_DIR}/debian/postrm-picons pkg-picons/DEBIAN/postrm && \
    chmod 755 pkg-picons/DEBIAN/postinst pkg-picons/DEBIAN/postrm && \
    cp ${BUILD_DIR}/debian/postinst-webgrab pkg-webgrab/DEBIAN/postinst && \
    cp ${BUILD_DIR}/debian/postrm-webgrab pkg-webgrab/DEBIAN/postrm && \
    chmod 755 pkg-webgrab/DEBIAN/postinst pkg-webgrab/DEBIAN/postrm

# Build all 5 packages
RUN echo "**** Building packages ****" && \
    dpkg-deb --build pkg-tvheadend && \
    dpkg-deb --build pkg-comskip && \
    dpkg-deb --build pkg-picons && \
    dpkg-deb --build pkg-webgrab && \
    dpkg-deb --build pkg-full

# Rename packages to proper names
RUN VERSION=$(cd tvheadend && git describe --always --dirty 2>/dev/null || echo "unknown") && \
    ARCH=$(dpkg --print-architecture) && \
    mv pkg-tvheadend.deb ${BUILD_DIR}/tvheadend_${VERSION}_${ARCH}.deb && \
    mv pkg-comskip.deb ${BUILD_DIR}/tvheadend-comskip_${VERSION}_${ARCH}.deb && \
    mv pkg-picons.deb ${BUILD_DIR}/tvheadend-picons_${VERSION}_all.deb && \
    mv pkg-webgrab.deb ${BUILD_DIR}/tvheadend-webgrab_${VERSION}_all.deb && \
    mv pkg-full.deb ${BUILD_DIR}/tvheadend-full_${VERSION}_all.deb && \
    echo "${VERSION}" > ${BUILD_DIR}/VERSION.txt && \
    echo "${ARCH}" > ${BUILD_DIR}/ARCH.txt

# Set distro-specific configuration for Debian
RUN sed -i "s|^DISTRO=.*|DISTRO=\"Debian\"|g" ${BUILD_DIR}/scripts/distro-config.sh && \
    sed -i "s|^DISTRO_BASE=.*|DISTRO_BASE=\"Debian Base: bookworm\"|g" ${BUILD_DIR}/scripts/distro-config.sh && \
    sed -i "s|^PACKAGE_EXT=.*|PACKAGE_EXT=\".deb\"|g" ${BUILD_DIR}/scripts/distro-config.sh && \
    sed -i "s|^INSTALL_CMD=.*|INSTALL_CMD=\"sudo dpkg -i\"|g" ${BUILD_DIR}/scripts/distro-config.sh && \
    sed -i "s|^INSTALL_DEPS_CMD=.*|INSTALL_DEPS_CMD=\"sudo apt-get install -f\"|g" ${BUILD_DIR}/scripts/distro-config.sh

# Update the copy-output script with actual build values
RUN sed -i "s/__TVHEADEND_COMMIT__/${TVHEADEND_COMMIT}/g" ${BUILD_DIR}/scripts/copy-output.sh && \
    sed -i "s/__COMSKIP_COMMIT__/${COMSKIP_COMMIT}/g" ${BUILD_DIR}/scripts/copy-output.sh && \
    sed -i "s/__COMCHAP_COMMIT__/${COMCHAP_COMMIT}/g" ${BUILD_DIR}/scripts/copy-output.sh && \
    sed -i "s/__PICONS_RELEASE__/${PICONS_RELEASE}/g" ${BUILD_DIR}/scripts/copy-output.sh

RUN chmod +x ${BUILD_DIR}/scripts/copy-output.sh ${BUILD_DIR}/scripts/distro-config.sh

WORKDIR ${BUILD_DIR}
CMD ["/build/scripts/copy-output.sh"]
